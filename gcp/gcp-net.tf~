// gpc-net.tf -- define the vpn gpc network
// ================================================= NETWORK+SUBNETS+ACLs
resource "google_compute_network" "vpn-net" {
  name                    = "vpn-net"
  auto_create_subnetworks = false
}
# google_compute_network.vpn-net.id - an identifier for resource with format projects/{{project}}/global/networks/{{name}}
# google_compute_network.vpn-net.gateway_ipv4 - gateway address for default routing out of the network. This value is selected by GCP.
# google_compute_network.vpn-net.self_link - URI of the created resource

# aws requires a CIDR for VPC and CIDRs for each subnet
# gpc puts both CIDR in subnetwork API call
resource "google_compute_subnetwork" "vpn-net" {
  name                    = "vpn-subnet"
  ip_cidr_range           = "192.168.0.0/16"
  region                  = var.gcp_region
  network                 = google_compute_network.vpn-net.id
  secondary_ip_range {
    range_name            = "services-range"
    ip_cidr_range         = "192.168.10.0/24"
  }

}
# google_compute_subnetwork.vpn-net.id - an identifier for resource with format projects/{{project}}/regions/{{region}}/subnetworks/{{name}}
# google_compute_subnetwork.vpn-net.creation_timestamp - Creation timestamp in RFC3339 text format.
# google_compute_subnetwork.vpn-net.gateway_address - gateway address for default routes to reach destination addresses outside this subnetwork.
# google_compute_subnetwork.vpn-net.self_link - URI of the created resource.



resource "aws_vpc" "vpn_vpc" {
  cidr_block           = "192.168.0.0/16"
  enable_dns_hostnames = true

  tags = {
    Name      = "vpn-vpc",
    Terraform = "True"
  }
}

resource "aws_subnet" "vpn_subnet" {
  vpc_id                  = aws_vpc.vpn_vpc.id
  cidr_block              = "192.168.10.0/24"
  map_public_ip_on_launch = true
  availability_zone       = var.aws_avz[0]

  tags = {
    Name      = "vpn-subnet",
    Terraform = "True"
  }
}

resource "aws_internet_gateway" "vpn_gw" {
  vpc_id               = aws_vpc.vpn_vpc.id

  tags = {
    Name = "vpn-gw",
    Terraform = "True"
  }
}

resource "aws_route_table" "vpn_rtb" {
  vpc_id = aws_vpc.vpn_vpc.id
  route {
    cidr_block             = "0.0.0.0/0"
    gateway_id             = aws_internet_gateway.vpn_gw.id
  }

  tags = {
    Name      = "vpn-rtb",
    Terraform = "True"
  }
}
resource "aws_route_table_association" "github_subnet_rtb" {
  subnet_id      = aws_subnet.vpn_subnet.id
  route_table_id = aws_route_table.vpn_rtb.id
}

## apply network ACLs to VPC to restrict access to entire VPC
## rather Security Groups which are per instance
## sadly network_acl_rules don't take descriptions
##
resource "aws_network_acl" "vpn_acl" {
  vpc_id      = aws_vpc.vpn_vpc.id
  subnet_ids  = [ aws_subnet.vpn_subnet.id ]
  tags = {
    Name      = "vpn-acl",
    Terraform = "True"
  }
}

## default network_acl settings
##
resource "aws_network_acl_rule" "vpn_acl_egress" {
  network_acl_id = aws_network_acl.vpn_acl.id
  rule_number    = 200
  egress         = true
  protocol       = "-1"
  rule_action    = "allow"
  cidr_block     = "0.0.0.0/0"
  from_port      = 0
  to_port        = 0
}
resource "aws_network_acl_rule" "vpn_acl_http" {
  network_acl_id = aws_network_acl.vpn_acl.id
  rule_number    = 100
  egress         = false
  protocol       = "-1"
  rule_action    = "allow"
  cidr_block     = "0.0.0.0/0"
  from_port      = 0
  to_port        = 0
}
