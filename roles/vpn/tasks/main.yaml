---
# tasks file for vpn

#- debug: var="{{ item }}"
#  with_items:
#  - ansible_os_family
#  - ansible_distribution
#  - ansible_distribution_major_version
#  - ansible_distribution_release
#  - ansible_distribution_version

- name: check for /dev/net/tun
  file:
    path: /dev/net/tun
    state: file
  register: tun_exists

# Fedora requires dnf module with exclude feature
# Fedora 32 won't resolve ansible_distribution variables w/ ansible 2.7
#    use pip install 'ansible==2.8.12' --update
- name: Verify Ansible and system requirements
  block:
  - assert:
      that: "ansible_version.full is version_compare('2.8.12', '>=')"
      fail_msg: "You must update Ansible to at least ansible 2.8.12 to use this role."
      success_msg: "ansible V{{ ansible_version.full }} is OK"
  - assert:
      that: not tun_exists.failed
      fail_msg: "The system does not have the TUN device available."
      success_msg: "/dev/net/tun exists"
#- debug: var=ansible_version.full


- name: Check if inside AWS
  block:
  - uri:
      url: http://169.254.169.254/latest/meta-data
      timeout: 2
    register: aws_uri_check
    failed_when: False
  - set_fact:
      is_aws_environment: "{{ aws_uri_check.status == 200 }}"
- debug: var=is_aws_environment

- name: setting hostname with hostnamectl
  command: hostnamectl set-hostname "{{ inventory_hostname }}"
  args:
    warn: no
  register: hostname
  when: is_aws_environment


- name: get external IP
  block:
  - uri:
      url: https://api.ipify.org/
      validate_certs: yes
      return_content: yes
      timeout: 2
    register: pub_ip
    failed_when: False
  - set_fact:
     public_ip: "{{ pub_ip.content }}"

- debug: var=public_ip
- debug: var=ansible_facts.all_ipv4_addresses
- debug: var=ansible_facts.all_ipv6_addresses


- name: override specific variables for distributions
  # allow OS-specific file to override defaults/main.yaml
  include_vars: "{{ item }}"
  with_first_found:
  - files:
    - "{{ ansible_os_family }}.yaml"
    - defaults.yaml
- debug: var=group_vars

- include_tasks: "{{ ansible_os_family }}_tasks.yaml"

- name: Install vpn packages (this may take a while)
  package: 
    name: "{{ item }}"
    state: present
  loop:
    - "{{ vpn_packages }}"

- include_tasks: "{{ ansible_os_family }}_services.yaml"

# this is very long, so it's separate for clarity
- include_tasks: easy-rsa.yaml

# generate the configuration and systemd files
- include_tasks: gen-configs.yaml

- name: enable net.ipv4.ip_forward
  block:
  - sysctl:
      name: net.ipv4.ip_forward
      value: 1
      reload: yes
      state: present
  - copy:
      dest: /etc/sysctl.d/99-openvpn-forward.conf
      backup: yes
      content: 'net.ipv4.ip_forward=1'

# how to figure out system is using ipv6?
- name: enable net.ipv6.conf.all.forwarding
  block:
  - sysctl:
      name: net.ipv6.conf.all.forwarding
      value: 1
      reload: yes
      state: present
  - copy:
      dest: /etc/sysctl.d/99-openvpn-forward.conf
      content: 'net.ipv6.conf.all.forwarding=1'



- name: get and patch openvpn script
  block:
  - get_url:
      url: https://raw.githubusercontent.com/Nyr/openvpn-install/master/openvpn-install.sh
      dest: ./openvpn-install.sh
      checksum: sha256:55cb078e469b5405cb6d59478ec0ce430a8782076dd4205b194be2bd8b8646da
      mode: "0755"
      backup: yes
    register: openvpn_script
  - replace:
      path: openvpn-install.sh
      regexp: "{{ item.regex }}"
      replace: "{{ item.replace }}"
      backup: yes
    loop:
      - { regex: '^(\s+)clear', replace: '\g<1>#clear' }
      - { regex: 'verb 3',      replace: 'verb 0'   }
    register: patch
#- debug: var=openvpn_script
#- debug: var=patch

#- debug: var=ansible_facts
